// Generated by CoffeeScript 1.11.1

/*

Camera Rotation Controller

Written by Bryce Summmers on 6 - 6 - 2017.

 - A mouse controller that allows a user to rotate the view in the xz plane
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SEE.I_Camera_Rotation = (function(superClass) {
    extend(I_Camera_Rotation, superClass);

    function I_Camera_Rotation(scene, camera) {
      this.scene = scene;
      this.camera = camera;
      I_Camera_Rotation.__super__.constructor.call(this);
      this._mouse_pressed = false;
      this._mouse_press_x = null;
      this._mouse_press_y = null;
      this._camera_angle = Math.PI / 4;
      this._start_angle = this._camera_angle;
      this._target_angle = this._camera_angle;
      this._camera_height = 300;
      this._start_height = this._camera_height;
      this._target_height = this._camera_height;
      this._zoom = 2;
    }

    I_Camera_Rotation.prototype.mouse_down = function(event) {
      this._mouse_pressed = true;
      this._start_angle = this._camera_angle;
      this._start_height = this._camera_height;
      this._mouse_press_x = event.x;
      return this._mouse_press_y = event.y;
    };

    I_Camera_Rotation.prototype.mouse_up = function(event) {
      return this._mouse_pressed = false;
    };

    I_Camera_Rotation.prototype.mouse_move = function(event) {
      var dx, dy;
      if (!this._mouse_pressed) {
        return;
      }
      dx = event.x - this._mouse_press_x;
      dy = event.y - this._mouse_press_y;
      this._target_angle = this._start_angle + Math.PI * 2 * dx / dim.w;
      return this._target_height = this._start_height + dy;
    };

    I_Camera_Rotation.prototype.mouse_wheel = function(event) {
      this._cameraZoom(-event.deltaY / 1000.0);
    };

    I_Camera_Rotation.prototype.time = function(dt) {
      var dist, per, per_c, x, y, z;
      per = .9;
      per_c = 1.0 - per;
      this._camera_angle = per * this._camera_angle + per_c * this._target_angle;
      this._camera_height = per * this._camera_height + per_c * this._target_height;
      dist = 200;
      x = dist * Math.cos(this._camera_angle);
      y = this._camera_height;
      z = dist * Math.sin(this._camera_angle);
      this.camera.position.copy(new THREE.Vector3(x, y, z));
      return this.camera.lookAt(new THREE.Vector3(0, 0, 0));
    };

    I_Camera_Rotation.prototype._cameraZoom = function(amount) {
      this._zoom += amount;
      this.camera.left = dim.w / -2 / this._zoom;
      this.camera.right = dim.w / 2 / this._zoom;
      this.camera.top = dim.h / 2 / this._zoom;
      this.camera.bottom = dim.h / -2 / this._zoom;
      this.camera.updateProjectionMatrix();
    };

    return I_Camera_Rotation;

  })(BDS.Interface_Controller_All);

}).call(this);
