// Generated by CoffeeScript 1.11.1

/*

Camera Rotation Controller

Written by Bryce Summmers on 6 - 6 - 2017.

 - A mouse controller that allows a user to rotate the view in the xz plane
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SEE.I_Seeing_Mode = (function(superClass) {
    extend(I_Seeing_Mode, superClass);

    function I_Seeing_Mode(scene, camera) {
      var dim, zoom;
      this.scene = scene;
      this.camera = camera;
      I_Seeing_Mode.__super__.constructor.call(this);
      this._key_down = false;
      this.NORMAL = 0;
      this.SEEING = 1;
      this.mode = this.NORMAL;
      dim = {
        x: 0,
        y: 0,
        w: window.innerWidth,
        h: innerHeight,
        padding: 10
      };
      zoom = 1;
      this.seeing_camera = new THREE.OrthographicCamera(dim.w / -2 / zoom, dim.w / 2 / zoom, dim.h / 2 / zoom, dim.h / -2 / zoom, 1, 600);
      this.normal_camera = this.camera;
      this.seeing_camera.position.copy(new THREE.Vector3(dim.w / 2, dim.h / 2, 2));
      this.seeing_camera.lookAt(new THREE.Vector3(dim.w / 2, dim.h / 2, 0));
    }

    I_Seeing_Mode.prototype.key_down = function(event) {
      return this._key_down = true;
    };

    I_Seeing_Mode.prototype.key_up = function(event) {
      this._key_down = false;
      if (event.key === " ") {
        if (this.mode === this.NORMAL) {
          this.scene.generate_impressions(this.normal_camera);
          this.scene.enable_seeing_mode();
          window.root_camera = this.seeing_camera;
          this.mode = this.SEEING;
        } else if (this.mode === this.SEEING) {
          window.root_camera = this.normal_camera;
          this.mode = this.NORMAL;
          this.scene.enable_normal_mode();
        }
      }
    };

    I_Seeing_Mode.prototype.time = function(dt) {};

    return I_Seeing_Mode;

  })(BDS.Interface_Controller_All);

}).call(this);
