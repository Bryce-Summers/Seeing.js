// Generated by CoffeeScript 1.11.1

/*

Written on Sept.30.2017 by Bryce Summers
Purpose: Initializes and glues everything together.
 */

(function() {
  SEE.E_Scene = (function() {
    function E_Scene() {
      this.scene = new THREE.Scene();
      this.input_root = null;
      this._objects = [];
      this.init_scene();
      this.init_geometries();
      this.seeing_mode = false;
      this.image = new SEE.E_Impressions(200, 200, 0, window.innerWidth, window.innerHeight);
    }

    E_Scene.prototype.init_scene = function() {
      this.init_label("Algo Pipe");
      return this.init_lighting();
    };

    E_Scene.prototype.init_geometries = function() {
      var intergrateIntoScene, loader;
      loader = new THREE.OBJLoader2();
      intergrateIntoScene = function(self, size, position) {
        return function(object) {
          var bbox, geometry, max, max_range, mesh, min, rangex, rangey, rangez, scale, scaleToNormal, translate;
          mesh = object.children[0];
          geometry = mesh.geometry;
          geometry.computeBoundingBox();
          bbox = geometry.boundingBox;
          min = bbox.min;
          max = bbox.max;
          translate = min.clone().multiplyScalar(-1);
          mesh.position.copy(translate);
          rangex = max.x - min.x;
          rangey = max.y - min.y;
          rangez = max.z - min.z;
          max_range = Math.max(rangex, Math.max(rangey, rangez));
          scaleToNormal = 1.0 / max_range;
          scale = scaleToNormal * size;
          mesh.scale.copy(new THREE.Vector3(scale, scale, scale));
          mesh.rotation.copy(new THREE.Euler(0, 1, 0, 'XYZ'));
          mesh.position.copy(position);
          mesh.material = SEE.params.preview_material;
          self.scene.add(object);
          self._objects.push(object);
        };
      };
      return loader.load('data/torus.obj', intergrateIntoScene(this, 200, new THREE.Vector3(70, -40, 0)));
    };

    E_Scene.prototype.getObjects = function() {
      return this._objects;
    };


    /*
    
    External API.
     */

    E_Scene.prototype.setInputRoot = function(input) {
      var input_root;
      return input_root = input;
    };

    E_Scene.prototype.getObjects = function() {
      return this._objects;
    };

    E_Scene.prototype.getVisual = function() {
      if (this.seeing_mode) {
        return this.seeing_scene;
      } else {
        return this.scene;
      }
    };

    E_Scene.prototype.new_ground_plane = function() {
      var divisions, gridHelper, size;
      size = 200;
      divisions = 10;
      gridHelper = new THREE.GridHelper(size, divisions);
      return gridHelper;
    };

    E_Scene.prototype.init_ground_plane = function() {
      var ground_plane;
      ground_plane = this.new_ground_plane();
      this.scene.add(ground_plane);
    };

    E_Scene.prototype.new_label = function(str) {
      var obj, params;
      obj = new THREE.Object3D();
      params = {
        font: SEE.style.fontLoader,
        message: str,
        height: 20,
        out: obj,
        fill_color: 0x000000,
        outline_color: 0x111111
      };
      SEE.style.newText(params);
      obj.position.copy(new THREE.Vector3(-50, 20, -100));
      obj.scale.copy(new THREE.Vector3(1, -1, 1));
      obj.rotation.copy(new THREE.Vector3(0, 0, Math.PI / 2));
      return obj;
    };

    E_Scene.prototype.init_label = function(str) {
      var label;
      label = this.new_label(str);
      this.scene.add(label);
    };

    E_Scene.prototype.init_lighting = function() {
      var ambient, directionalLight;
      ambient = new THREE.AmbientLight(0x404040);
      this.scene.add(ambient);
      directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
      directionalLight.position.set(0, 1, 1);
      return this.scene.add(directionalLight);
    };

    E_Scene.prototype.enable_normal_mode = function() {
      return this.seeing_mode = false;
    };

    E_Scene.prototype.enable_seeing_mode = function() {
      return this.seeing_mode = true;
    };

    E_Scene.prototype.generate_impressions = function(camera) {
      var geometry, geometryToWorldTransform, group, i, len, mesh, ref;
      this.image.clear();
      ref = this._objects;
      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        mesh = group.children[0];
        geometry = mesh.geometry;
        mesh.updateMatrixWorld(true);
        geometryToWorldTransform = mesh.matrixWorld.clone();
        this.image.quantize(geometry, geometryToWorldTransform, camera);
      }
      this.seeing_scene = new THREE.Scene();
      return this.seeing_scene.add(this.image.getVisual());
    };

    return E_Scene;

  })();

}).call(this);
